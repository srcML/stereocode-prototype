<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="api_utility_verifier.cpp"><comment type="block" format="doxygen">/** @stereotype boolean_verifier public_field_verifier */</comment>
<function stereotype="boolean_verifier public_field_verifier "><type><name>void</name></type>
<name><name>ChunkListTest</name><operator>::</operator><name>test_get_release</name></name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>SETUP_CHUNK_LIST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>is_valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>torrent</name><operator>::</operator><name>ChunkHandle</name></name></type> <name>handle_0</name> <init>= <expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_0</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_0</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>index</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_0</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>handle_0</name><operator>.</operator><name>is_writable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>handle_0</name><operator>.</operator><name>is_blocking</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>is_valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>references</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>writable</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>blocking</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>torrent</name><operator>::</operator><name>ChunkHandle</name></name></type> <name>handle_1</name> <init>= <expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>torrent</name><operator>::</operator><name>ChunkList</name><operator>::</operator><name>get_writable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_1</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_1</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>index</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_1</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_1</name><operator>.</operator><name>is_writable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>handle_1</name><operator>.</operator><name>is_blocking</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>is_valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>references</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>writable</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>blocking</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>torrent</name><operator>::</operator><name>ChunkHandle</name></name></type> <name>handle_2</name> <init>= <expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>torrent</name><operator>::</operator><name>ChunkList</name><operator>::</operator><name>get_blocking</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_2</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_2</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>index</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_2</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>handle_2</name><operator>.</operator><name>is_writable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>handle_2</name><operator>.</operator><name>is_blocking</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><call><name>is_valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><call><name>references</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><call><name>writable</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>chunk_list</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><call><name>blocking</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>chunk_list</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Test ro-&gt;wr, etc.</comment>

  <expr_stmt><expr><call><name>CLEANUP_CHUNK_LIST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
