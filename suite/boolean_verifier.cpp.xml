<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="boolean_verifier.cpp"><comment type="block" format="doxygen">/** @stereotype boolean_verifier public_field_verifier */</comment>
<function stereotype="boolean_verifier public_field_verifier "><type><name>void</name></type> <name><name>BTreeTest</name><operator>::</operator><name>testSplit5</name></name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="string">"1"</literal> <operator>==</operator> <call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>find_first</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="string">"2"</literal> <operator>==</operator> <call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>find_first</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="string">"3"</literal> <operator>==</operator> <call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>find_first</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="string">"4"</literal> <operator>==</operator> <call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>find_first</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="string">"5"</literal> <operator>==</operator> <call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>find_first</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name><name>splitTree5</name><operator>-&gt;</operator><name>split</name></name><argument_list>(<argument><expr><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name></name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><call><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>rightSubtree</name></name> <operator>==</operator> <name><name>result</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name><name>result</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>second</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>first</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>rightSubtree</name></name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name></name><operator>)</operator><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>second</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>first</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>first</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name></name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>content</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>rightSubtree</name><operator>-&gt;</operator><name>rightSubtree</name></name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>splitTree5</name><operator>-&gt;</operator><name>rootNode</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function></unit>
