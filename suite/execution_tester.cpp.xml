<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="execution_tester.cpp"><comment type="block" format="doxygen">/** @stereotype unclassified execution_tester */</comment>
<function stereotype="unclassified execution_tester "><type><name>xmlDocPtr</name></type> <name><name>XmlTestTools</name><operator>::</operator><name>parseXmlStream</name></name><parameter_list>(<parameter><decl><type><name>SvStream</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>sal_Size</name></type> <name>nSize</name> <init>= <expr><call><name><name>pStream</name><operator>-&gt;</operator><name>remainingSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name><name>scoped_array</name><argument_list type="generic">&lt;<argument><expr><name>sal_uInt8</name></expr></argument>&gt;</argument_list></name></name></type> <name>pBuffer</name><argument_list>(<argument><expr><operator>new</operator> <name><name>sal_uInt8</name><index>[<expr><name>nSize</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><call><name><name>pBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuffer</name><index>[<expr><name>nSize</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>xmlParseDoc</name><argument_list>(<argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>xmlChar</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>pBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</return>
}</block></function></unit>
