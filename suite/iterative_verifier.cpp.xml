<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="iterative_verifier.cpp"><comment type="block" format="doxygen">/** @stereotype boolean_verifier iterative_verifier api_utility_verifier public_field_verifier */</comment>
<function stereotype="boolean_verifier iterative_verifier api_utility_verifier public_field_verifier "><type><name>void</name></type> <name><name>CDirectoryListingParserTest</name><operator>::</operator><name>testAll</name></name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>CServer</name></type> <name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CDirectoryListingParser</name></type> <name>parser</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>t_entry</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></name></type> <name>iter</name> <init>= <expr><call><name><name>m_entries</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>m_entries</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>SetType</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>serverType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>SetServer</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name><name>iter</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>AddData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>CDirectoryListing</name></type> <name>listing</name> <init>= <expr><call><name><name>parser</name><operator>.</operator><name>Parse</name></name><argument_list>(<argument><expr><call><name>CServerPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><call><name><name>listing</name><operator>.</operator><name>GetCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>m_entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>t_entry</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></name></type> <name>iter</name> <init>= <expr><call><name><name>m_entries</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>m_entries</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>wxString</name></type> <name>msg</name> <init>= <expr><call><name><name>wxString</name><operator>::</operator><name>Format</name></name><argument_list>(<argument><expr><call><name>_T</name><argument_list>(<argument><expr><literal type="string">"Data: %s  Expected:\n%s\n  Got:\n%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wxString</name><argument_list>(<argument><expr><call><name><name>iter</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wxConvUTF8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iter</name><operator>-&gt;</operator><name>reference</name><operator>.</operator><name>dump</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>listing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>dump</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CPPUNIT_ASSERT_MESSAGE</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>msg</name><operator>.</operator><name>mb_str</name></name><argument_list>(<argument><expr><name>wxConvUTF8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>listing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
